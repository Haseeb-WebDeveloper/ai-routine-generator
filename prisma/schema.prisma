generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?        @default("User")
  passwordHash  String?        @map("password_hash")
  isActive      Boolean        @default(true) @map("is_active")
  quizCompleted Boolean        @default(false) @map("quiz_completed")
  role          String?        @default("user")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  conversations Conversation[]
  quizResponses QuizResponse[]
  skinProfile   SkinProfile?   @relation("UserSkinProfile")
  skinProfileId String?        @unique @map("skin_profile_id")

  @@map("users")
}

model SkinProfile {
  id          String   @id @default(cuid())
  user        User?    @relation("UserSkinProfile", fields: [userId], references: [id], onDelete: Cascade)
  userId      String?  @unique @map("user_id")
  age         Int?     @map("age")
  gender      String?  @map("gender")
  skinType    String?  @map("skin_type")
  concerns    String[] @map("concerns")
  budget      String?  @map("budget")
  climate     String?  @map("climate")
  allergies   String[] @map("allergies")
  skinSummary String?  @map("skin_summary")

  @@map("skin_profiles")
}

model QuizResponse {
  id              String   @id @default(cuid())
  userEmail       String   @map("user_email")
  skinType        String   @map("skin_type")
  concerns        String[]
  age             Int
  budget          String
  skinSensitivity String   @map("skin_sensitivity")
  climate         String
  lifestyle       String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  user            User     @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@map("quiz_responses")
}

model EmailTemplate {
  id        String     @id @default(cuid())
  name      String
  subject   String
  content   String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  campaigns Campaign[]

  @@map("email_templates")
}

model Campaign {
  id            String         @id @default(cuid())
  name          String
  description   String?
  templateId    String         @map("template_id")
  selectedUsers String[]       @map("selected_users")
  status        CampaignStatus @default(draft)
  scheduledAt   DateTime?      @map("scheduled_at")
  sentAt        DateTime?      @map("sent_at")
  stats         Json?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  template      EmailTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("campaigns")
}

model Product {
  id            String        @id @default(cuid())
  name          String
  brand         String
  type          ProductType
  gender        Gender
  age           AgeRange[]
  budget        BudgetRange
  category      Category
  useTime       UseTime[]     @map("use_time")
  skinTypes     SkinType[]    @map("skin_types")
  skinConcerns  SkinConcern[] @map("skin_concerns")
  ingredients   Json
  texture       Texture
  fragranceFree Boolean       @map("fragrance_free")
  alcoholFree   Boolean       @map("alcohol_free")
  instructions  String
  price         Decimal       @map("price")
  purchaseLink  String        @map("purchase_link")
  imageUrl      String        @map("image_url")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  @@map("products")
}

model Conversation {
  id        String        @id @default(cuid())
  userEmail String        @map("user_email")
  title     String?       @default("New Conversation")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  messages  ChatMessage[]
  user      User          @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@map("conversations")
}

model ChatMessage {
  id             String       @id @default(cuid())
  conversationId String       @map("conversation_id")
  role           String
  content        String
  timestamp      DateTime     @default(now())
  metadata       Json?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum CampaignStatus {
  draft
  scheduled
  sent
  cancelled
}

enum ProductType {
  CLEANSER
  MOISTURIZER
  SUNSCREEN
  TONER
  ESSENCE
  FACE_CREAM
  HYDRATOR
  SERUM
  AMPOULE
  SPOT_TREATMENT
  EXFOLIANT
  RETINOID
  PEPTIDE
  VITAMIN_C
  NIACINAMIDE
  BRIGHTENING
  ANTI_AGING
  SLEEPING_MASK
  NIGHT_CREAM
  FACE_OIL
  EYE_CREAM
  EYE_SERUM
  LIP_BALM
  LIP_CARE
  MAKEUP_REMOVER
  CLEANSING_BALM
  MICELLAR_WATER
  OIL_CLEANSER
  FACE_MASK
  SHEET_MASK
  CLAY_MASK
  PEEL_MASK
  SCRUB_MASK
  HYDRATING_MASK
  DETOX_MASK
  BARRIER_CREAM
  CICA_CREAM
  SOOTHING_CREAM
  ANTI_REDNESS
  PORE_MINIMIZER
  SEBUM_CONTROL
}

enum SkinType {
  OILY
  COMBINATION
  DRY
  NORMAL
  SENSITIVE
  MATURE
  ALL
}

enum SkinConcern {
  ACNE
  BLACKHEADS
  DULLNESS
  HYPERPIGMENTATION
  CHAPPED_LIPS
  LOSS_OF_FIRMNESS
  FINE_LINES
  WRINKLES
  DEHYDRATION
  DRYNESS
  REDNESS
  SENSITIVITY
  PORES
  OILINESS
  UNEVEN_TEXTURE
  ELASTICITY
  UNEVEN_TONE
  DARK_CIRCLES
  PUFFINESS
  SCARRING
  SUN_DAMAGE
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum BudgetRange {
  BUDGET_FRIENDLY
  MID_RANGE
  PREMIUM
}

enum Texture {
  GEL
  CREAM
  LOTION
  FOAM
  OIL
  SPRAY
  MASK
  BALM
  FLUID
  LIQUID
}

enum UseTime {
  MORNING
  NIGHT
  DAY
}

enum Category {
  CORE
  TREATMENT
  HYDRATION
  SPECIAL
  OPTIONAL
}


enum AgeRange {
  KIDS
  TEEN
  YOUNG
  MATURE
  SENIOR
  ALL
}